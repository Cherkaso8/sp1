#!/usr/bin/env bash
set -eo pipefail

BASE_DIR="$HOME"
SP1_DIR="${SP1_DIR:-"$BASE_DIR/.sp1"}"
SP1_BIN_DIR="$SP1_DIR/bin"
mkdir -p "$SP1_BIN_DIR"

BINS=("cargo-prove")
export RUSTFLAGS="-C target-cpu=native"

need_cmd() { command -v "$1" &>/dev/null || err "Command '$1' not found"; }
check_url() {
  local url="$1"
  curl --head --silent --fail "$url" --output /dev/null 2>/dev/null || {
    err "Unable to access: $url"
  }
}
download() { curl -#LS "$1" -o "${2:-/dev/stdout}"; }

main() {
  need_cmd git
  need_cmd curl

  while [[ $# -gt 0 ]]; do
    case "$1" in
      -r|--repo) SP1UP_REPO="$2"; shift ;;
      -b|--branch) SP1UP_BRANCH="$2"; shift ;;
      -v|--version) SP1UP_VERSION="$2"; shift ;;
      -p|--path) SP1UP_LOCAL_REPO="$2"; shift ;;
      -P|--pr) SP1UP_PR="$2"; shift ;;
      -C|--commit) SP1UP_COMMIT="$2"; shift ;;
      -c|--c-toolchain) SP1UP_C_TOOLCHAIN=true ;;
      --arch) SP1UP_ARCH="$2"; shift ;;
      --platform) SP1UP_PLATFORM="$2"; shift ;;
      -t|--token) GITHUB_TOKEN="$2"; shift ;;
      -h|--help) usage; exit 0 ;;
      *) err "Unknown option: $1" ;;
    esac
    shift
  done

  banner
  [[ -n "$SP1UP_PR" && -z "$SP1UP_BRANCH" ]] && SP1UP_BRANCH="refs/pull/$SP1UP_PR/head"
  
  if [[ -n "$SP1UP_LOCAL_REPO" ]]; then
    need_cmd cargo
    warn "--repo, --branch, and --version are ignored for local installs"
    cd "$SP1UP_LOCAL_REPO" && cargo build --bins --release
    for bin in "${BINS[@]}"; do
      rm -f "$SP1_BIN_DIR/$bin"
      ln -s "$PWD/target/release/$bin" "$SP1_BIN_DIR/$bin"
    done
    say "done!"
    exit 0
  fi

  SP1UP_REPO="${SP1UP_REPO:-succinctlabs/sp1}"
  SP1UP_VERSION="${SP1UP_VERSION:-latest}"

  if [[ "$SP1UP_REPO" == "succinctlabs/sp1" && -z "$SP1UP_BRANCH" && -z "$SP1UP_COMMIT" ]]; then
    SP1UP_TAG="v$SP1UP_VERSION"
    say "installing SP1 $SP1UP_TAG"

    determine_platform
    determine_architecture

    RELEASE_URL="https://github.com/${SP1UP_REPO}/releases/download/${SP1UP_TAG}/"
    BIN_ARCHIVE_URL="${RELEASE_URL}cargo_prove_${SP1UP_VERSION}_${PLATFORM}_${ARCHITECTURE}.$EXT"

    check_url "$BIN_ARCHIVE_URL"
    say "downloading cargo-prove"
    if [[ "$PLATFORM" == "win32" ]]; then
      tmp=$(mktemp -d)/cargo-prove.zip
      download "$BIN_ARCHIVE_URL" "$tmp"
      unzip "$tmp" -d "$SP1_BIN_DIR"
      rm -f "$tmp"
    else
      download "$BIN_ARCHIVE_URL" | tar -xzC "$SP1_BIN_DIR"
    fi

    for bin in "${BINS[@]}"; do
      bin_path="$SP1_BIN_DIR/$bin"
      say "installed - $(ensure "$bin_path" prove --version)"
    done

    say "installing rust toolchain"
    install_rust_toolchain
  else
    need_cmd cargo
    SP1UP_BRANCH="${SP1UP_BRANCH:-main}"
    REPO_PATH="$SP1_DIR/$SP1UP_REPO"

    [[ ! -d "$REPO_PATH" ]] && git clone "https://github.com/$SP1UP_REPO" "$REPO_PATH"
    cd "$REPO_PATH"
    git fetch origin "$SP1UP_BRANCH" && git checkout "origin/$SP1UP_BRANCH"
    [[ -n "$SP1UP_COMMIT" ]] && git checkout "$SP1UP_COMMIT"

    cargo build --bins --release
    for bin in "${BINS[@]}"; do
      for try_path in target/release/$bin target/release/$bin.exe; do
        [[ -f "$try_path" ]] && mv -f "$try_path" "$SP1_BIN_DIR"
      done
    done
  fi

  [[ "$SP1UP_C_TOOLCHAIN" = true ]] && install_c_toolchain
  say "done!"
}

install_rust_toolchain() {
  local toolchain_cmd="$bin_path prove install-toolchain"
  if [[ -n "$GITHUB_TOKEN" ]]; then
    toolchain_cmd="$toolchain_cmd --token $GITHUB_TOKEN"
  fi
  ensure "$toolchain_cmd"
}

install_c_toolchain() {
  say "installing C++ toolchain for RISC-V"
  determine_platform
  determine_architecture

  case $PLATFORM in
    linux) TOOLCHAIN_URL="https://github.com/risc0/toolchain/releases/download/2022.03.25/riscv32im-linux-x86_64.tar.xz" ;;
    darwin) TOOLCHAIN_URL="https://github.com/risc0/toolchain/releases/download/2022.03.25/riscv32im-osx-x86_64.tar.xz" ;;
    win32) TOOLCHAIN_URL="https://github.com/risc0/toolchain/releases/download/2022.03.25/riscv32im-windows-x86_64.tar.xz" ;;
    *) err "unsupported platform: $PLATFORM" ;;
  esac

  TOOLCHAIN_ARCHIVE="/tmp/$(basename "$TOOLCHAIN_URL")"
  TOOLCHAIN_INSTALL_DIR="$SP1_DIR/riscv"
  download "$TOOLCHAIN_URL" "$TOOLCHAIN_ARCHIVE"

  mkdir -p "$TOOLCHAIN_INSTALL_DIR"
  tar -xvf "$TOOLCHAIN_ARCHIVE" -C "$TOOLCHAIN_INSTALL_DIR" >/dev/null 2>&1
  rm -f "$TOOLCHAIN_ARCHIVE"

  GCC_PATH=$(find "$TOOLCHAIN_INSTALL_DIR" -name 'riscv32-unknown-elf-gcc' -type f | head -n 1)
  [[ -z "$GCC_PATH" ]] && err "riscv32-unknown-elf-gcc not found"

  ln -sf "$GCC_PATH" "$SP1_BIN_DIR/riscv32-unknown-elf-gcc"
  export PATH="$SP1_BIN_DIR:$PATH"
  export CC_riscv32im_succinct_zkvm_elf="$SP1_BIN_DIR/riscv32-unknown-elf-gcc"

  say "installed C++ toolchain for RISC-V"
}

determine_platform() {
  uname_s=$(uname -s)
  PLATFORM=$(tolower "${SP1UP_PLATFORM:-$uname_s}")
  case $PLATFORM in
    linux|darwin|win32) ;;
    *) err "unsupported platform: $PLATFORM" ;;
  esac
  EXT="$([[ "$PLATFORM" == "win32" ]] && echo "zip" || echo "tar.gz")"
}

determine_architecture() {
  uname_m=$(uname -m)
  ARCHITECTURE=$(tolower "${SP1UP_ARCH:-$uname_m}")
  [[ "$ARCHITECTURE" == "x86_64" ]] && ARCHITECTURE="amd64"
  [[ "$ARCHITECTURE" == "arm64" || "$ARCHITECTURE" == "aarch64" ]] && ARCHITECTURE="arm64"
}

usage() {
  cat <<EOF
Usage: sp1up [options]
Options:
  -h, --help        Print help information
  -v, --version     Install a specific version
  -b, --branch      Install a specific branch
  -P, --pr          Install a specific Pull Request
  -C, --commit      Install a specific commit
  -r, --repo        Install from a remote GitHub repo
  -p, --path        Install a local repository
  -c, --c-toolchain Install a C++ toolchain for RISC-V
  --arch            Install a specific architecture (amd64, arm64)
  --platform        Install a specific platform (win32, linux, darwin)
  -t, --token       GitHub token for API rate limits
EOF
}

say() { printf "sp1up: %s\n" "$1"; }
warn() { say "warning: $1" >&2; }
err() { say "$1" >&2; exit 1; }
tolower() { echo "$1" | awk '{print tolower($0)}'; }
ensure() { "$@" || err "command failed: $*"; }

# Banner Function for sp1 
banner() {
  printf "
.______  ._______ ._______ ._______ ._______ ._______ ._______ ._______ ._______

   _____  ____  ___
  / ___/ / __ \<  /
  \__ \ / /_/ // /                        A performant, 100%% open-source,
 ___/ // ____// /                              general-purpose zkVM.  
/____//_/    /_/   

._______ ._______ ._______ ._______ ._______ ._______ ._______ ._______ ._______ 

Repo       : https://github.com/succinctlabs/sp1
Book       : https://succinctlabs.github.io/sp1
Telegram   : https://t.me/+AzG4ws-kD24yMGYx

._______ ._______ ._______ ._______ ._______ ._______ ._______ ._______ ._______ 

"
}


main "$@"
